resources:
  - name: bucc
    type: git
    webhook_token: (( grab meta.github.webhook_token ))
    check_every: 24h
    source:
      uri:         (( grab meta.github.uri ))
      branch:      (( grab meta.github.branch ))
      private_key: (( grab meta.github.private_key ))
      ignore_paths: [ci/*]
      submodules: all

  - name: bucc-master
    type: git
    check_every: 24h
    source:
      uri:         (( grab meta.github.uri ))
      branch:      (( grab meta.github.master-branch ))
      private_key: (( grab meta.github.private_key ))

  - name: bucc-stable
    type: git
    check_every: 24h
    source:
      uri:         (( grab meta.github.uri ))
      branch:      (( grab meta.github.master-branch ))
      private_key: (( grab meta.github.private_key ))
      tag_filter: "v*"

  - name: bucc-ci
    type: git
    webhook_token: (( grab meta.github.webhook_token ))
    check_every: 24h
    source:
      uri:         (( grab meta.github.uri ))
      branch:      (( grab meta.github.branch ))
      private_key: (( grab meta.github.private_key ))
      paths: [ci/*]
      disable_ci_skip: true

  - name: bosh-deployment
    type: git
    check_every: 24h
    source:
      uri:    https://github.com/cloudfoundry/bosh-deployment.git
      branch: (( grab meta.github.master-branch ))
      ignore_paths: [ci/*]

  - name: version
    type: semver
    source :
      driver: git
      uri: (( grab meta.github.uri ))
      private_key: (( grab meta.github.private_key ))
      branch: version
      file: version
      initial_version:   (( grab meta.initial_version || "0.0.1" ))

  - name: compile
    type: bosh-deployment
    source:
      deployment: compile-releases
      target: (( grab meta.lite.target ))
      client: admin
      client_secret: (( grab meta.lite.client_secret ))
      ca_cert: (( grab meta.lite.ca_cert ))

  - name: compiled-releases-concourse
    type: s3
    source:
      bucket: "bucc-compiled-releases"
      access_key_id: (( grab meta.aws.access_key_id ))
      secret_access_key: (( grab meta.aws.secret_access_key ))
      region_name: eu-west-1
      regexp: "concourse.*-(\\d+).tgz"

  - name: compiled-releases-os-conf
    type: s3
    source:
      bucket: "bucc-compiled-releases"
      access_key_id: (( grab meta.aws.access_key_id ))
      secret_access_key: (( grab meta.aws.secret_access_key ))
      region_name: eu-west-1
      regexp: "os-conf.*-(\\d+).tgz"

  - name: compiled-releases-credhub-importer
    type: s3
    source:
      bucket: "bucc-compiled-releases"
      access_key_id: (( grab meta.aws.access_key_id ))
      secret_access_key: (( grab meta.aws.secret_access_key ))
      region_name: eu-west-1
      regexp: "credhub-importer.*-(\\d+).tgz"

  - name: compiled-releases-postgres
    type: s3
    source:
      bucket: "bucc-compiled-releases"
      access_key_id: (( grab meta.aws.access_key_id ))
      secret_access_key: (( grab meta.aws.secret_access_key ))
      region_name: eu-west-1
      regexp: "postgres.*-(\\d+).tgz"

  - name: compiled-releases-bucc-bbr
    type: s3
    source:
      bucket: "bucc-compiled-releases"
      access_key_id: (( grab meta.aws.access_key_id ))
      secret_access_key: (( grab meta.aws.secret_access_key ))
      region_name: eu-west-1
      regexp: "bucc-bbr.*-(\\d+).tgz"

  - name: compiled-releases-vault-credhub-proxy
    type: s3
    source:
      bucket: "bucc-compiled-releases"
      access_key_id: (( grab meta.aws.access_key_id ))
      secret_access_key: (( grab meta.aws.secret_access_key ))
      region_name: eu-west-1
      regexp: "vault-credhub-proxy.*-(\\d+).tgz"

  - name: compiled-releases-director-bosh-dns
    type: s3
    source:
      bucket: "bucc-compiled-releases"
      access_key_id: (( grab meta.aws.access_key_id ))
      secret_access_key: (( grab meta.aws.secret_access_key ))
      region_name: eu-west-1
      regexp: "director-bosh-dns.*-(\\d+).tgz"

  - name: compiled-releases-bosh-dns
    type: s3
    source:
      bucket: "bucc-compiled-releases"
      access_key_id: (( grab meta.aws.access_key_id ))
      secret_access_key: (( grab meta.aws.secret_access_key ))
      region_name: eu-west-1
      regexp: "bosh-dns.*-(\\d+).tgz"

  - name: compiled-releases-manifest
    type: git
    source:
      uri:         (( grab meta.github.uri ))
      branch:      compile_releases_manifest
      private_key: (( grab meta.github.private_key ))

  - name: notify
    type: slack-notification
    source:
      url: (( grab meta.slack.webhook ))

  - name: github
    type: github-release
    check_every: 24h
    source:
      user:         (( grab meta.github.owner ))
      repository:   (( grab meta.github.repo ))
      access_token: (( grab meta.github.access_token ))

  - name: bosh-release-concourse
    type: bosh-io-release
    check_every: 24h
    source:
      repository: concourse/concourse-bosh-release

  - name: bosh-release-postgres
    type: bosh-io-release
    check_every: 24h
    source:
      repository: cloudfoundry/postgres-release

  - name: credhub-cli
    type: github-release
    check_every: 24h
    source:
      user: cloudfoundry-incubator
      repository: credhub-cli
      access_token: (( grab meta.github.access_token ))

  - name: bbr-cli
    type: github-release
    check_every: 24h
    source:
      user: cloudfoundry-incubator
      repository: bosh-backup-and-restore
      access_token: (( grab meta.github.access_token ))

  - name: bosh-cli
    type: github-release
    check_every: 24h
    source:
      user: cloudfoundry
      repository: bosh-cli
      access_token: (( grab meta.github.access_token ))

  - name: uaa-cli
    type: github-release
    check_every: 24h
    source:
      user: cloudfoundry-incubator
      repository: uaa-cli
      access_token: (( grab meta.github.access_token ))

  - name: safe-cli
    type: github-release
    check_every: 24h
    source:
      user: starkandwayne
      repository: safe
      access_token: (( grab meta.github.access_token ))
