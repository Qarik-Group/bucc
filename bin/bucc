#!/bin/bash
version=$(grep bucc .versions | sed 's/[^0-9.]*\([0-9.]*\).*/\1/')

repo_root=$(dirname $(realpath "$0") | rev | cut -c5- | rev)
repo_root=$(git rev-parse --show-toplevel)
state=${repo_root}/state
mkdir -p $state/manifests
manifest="${repo_root}/src/bosh-deployment/bosh.yml"
state_arg="--state ${state}/state.json"
vars_store=${state}/creds.yml
vars_store_arg="--vars-store ${vars_store}"

PATH=${repo_root}/bin:${PATH}

version=$(grep bucc ${repo_root}/.versions | sed 's/[^0-9.]*\([0-9.]*\).*/\1/')

pushd () {
    command pushd "$@" > /dev/null
}

popd () {
    command popd "$@" > /dev/null
}

if [[ -x "$(command -v bosh2)" && $(bosh2 --version | awk '{print $2}') > 2.0 ]]; then
    boshexec=bosh2
else
    boshexec=bosh
fi

cpi() {
    local cpi_file=${state}/cpi
    local lite_file=${state}/lite
    if [[ ! -f $cpi_file ]]; then
        echo "virtualbox" > ${cpi_file}
        echo "true" > ${lite_file}
    fi
    cat ${cpi_file}
}

lite() {
    local lite_file=${state}/lite
    if [[ ! -f $lite_file ]]; then
        echo "false" > ${lite_file}
    fi
    cat ${lite_file}
}

cpis() {
    find ${repo_root}/ops/cpis -mindepth 1 -maxdepth 1 ! -type l -exec basename -a {} +;
}

validate_vars_file() {
    # Todo: prettify
    local cpi_vars=${repo_root}/ops/cpis/$(cpi)/vars.tmpl
    local vars_file=${repo_root}/vars.yml
    if [ ! -e $vars_file ]; then
        cp $cpi_vars $vars_file
        if [ ! $(cpi) = "virtualbox" ]; then
            echo "We just copied a template in $vars_file please adjust it to your needs"
            # we should break here or check file contents and see if we still have the right var file for the cpi
            exit 1
        fi
    fi
}

vars_file() {
    local state_vars=${state}/vars.yml
    local vars_file=${repo_root}/vars.yml
    ${boshexec} int $vars_file > $state_vars
    echo $state_vars
}

validate_cpi() {
    local cpis_dir=${repo_root}/ops/cpis
    if [ ! -d ${cpis_dir}/$(cpi) ]; then
        echo "'--cpi $(cpi)' not supported, please one of the following:"
        echo $(cpis | xargs)
        exit 1
    fi
}

validate_cpi_flags() {
    if [ -f ${state}/flags ]; then
        for option in $(cat ${state}/flags); do
            local flags_dir=${repo_root}/ops/cpis/$(cpi)/flags
            if [ ! -d ${flags_dir} ]; then
                echo "unsupported flag: --${option}"
                echo "no flags suppored for '--cpi $(cpi)'"
                exit 1
            fi
            if [ ! -f ${flags_dir}/${option}.yml ]; then
                echo "unsupported flag: --${option}"
                echo "flags for '--cpi $(cpi)' are: $(ls ${flags_dir} | cut -d "." -f 1 | sed 's/^/--/' | xargs)"
                exit 1
            fi
        done
    fi
}

int_args() (
    local ops_file_args=""
    if [ -e ${state}/manifests/0-cpi.yml ]; then
        rm ${state}/manifests/*
    fi

    vars_file_arg="--vars-file $(vars_file)"

    append_ops_args_for_dir() {
        cp_files="${ops_file_args} $(cp ${repo_root}/$1/*.yml ${state}/manifests/)"
        ops_file_args="$(find ${state}/manifests/*.yml | sort | sed 's/^/-o /' | xargs)"
    }

    append_ops_args_for_file() {
        cp_files="${ops_file_args} $(cp ${repo_root}/$1 ${state}/manifests/)"
        ops_file_args="$(find ${state}/manifests/*.yml | sort | sed 's/^/-o /' | xargs)"
    }

    if [ $(lite) = true ]; then
        append_ops_args_for_dir "ops/lite"
    elif [ $(lite) = false ]; then
        append_ops_args_for_dir "ops/runc"
    fi

    append_ops_args_for_dir "ops"

    append_ops_args_for_dir "ops/cpis/$(cpi)"

    if [ -f ${state}/flags ]; then
        for flag in $(cat ${state}/flags); do
            append_ops_args_for_file "ops/cpis/$(cpi)/flags/${flag}.yml"
        done
    fi

    echo "${manifest} ${ops_file_args} ${vars_store_arg} ${vars_file_arg}"
)

ca_cert() {
    local ca_cert_file="${state}/ca.pem"
    store_int --path /default_ca/ca > $ca_cert_file
    store_int --path /credhub_ca/ca >> $ca_cert_file
    echo $ca_cert_file
}

usage() {
    echo "BUCC (BOSH UAA Credhud Concourse) CLI v${version}"
    echo "  up -- creates the bucc VM with bosh create-env"
    echo "  down -- deletes VM with bosh delete-env - can be used with --clean"
    echo "  clean -- start with a clean enviorment - use this only after you've tear down your env"
    echo "  ssh -- ssh into the bucc VM"
    echo "  env -- sourceable envrionment variables for cli clients"
    echo "  int -- wrapper for '${boshexec} int' for the bosh manifest"
    echo "  info -- displays info about bucc deployed endpoints"
    echo "  bosh -- configures bosh cli"
    echo "  credhub -- configures credhub cli"
    echo "  uaac -- configures uaac cli"
    echo "  fly -- configures fly cli"
    echo "  routes -- add routes for virtualbox"
    echo "  test -- check if all systems are operational"
    exit 1
}

up_usage() {
    echo "  --cpi    Cloud provider: [$(cpis | xargs | sed 's/ /, /g')]"
    echo "  --lite   Created bosh will use the warden cpi with garden runc"
    echo ""
    echo "  Optional cpi specific flags:"

    local cpis_dir=${repo_root}/ops/cpis
    for cpi in $(cpis); do
        local flags_dir=${repo_root}/ops/cpis/${cpi}/flags
        if [ -d ${flags_dir} ]; then
            echo "    ${cpi}: $(ls ${flags_dir} | cut -d "." -f 1 | sed 's/^/--/' | xargs)"
        fi
    done

}

down_usage() {
    echo "  -c | --clean  cleans up your enviroment by removing state files"
}

platform() {
    if [ "$(uname)" == "Darwin" ]; then
        echo "darwin"
    elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
        echo "linux"
    fi
}

faketty() {
    case $(platform) in
        darwin)
            script -q /dev/null "$@"
            ;;
        linux)
            script -qfc "$(printf "%q " "$@")" /dev/null
            ;;
    esac
}

up() {
    ${boshexec} create-env $(int_args) $state_arg
}

down() {
    if [ ! -e ${repo_root}/vars.yml ]; then
      echo "please create a enviroment first with 'bucc up'"
      exit 1
    fi
    ${boshexec} delete-env $(int_args) $state_arg
    echo "you can use the clean command if your are planning to use a new cpi or ip"
}

clean() {
  if curl -m 0.1 -k -s https://$(bosh int <(bucc vars) --path /bosh_target):25555/info | grep uaa &>/dev/null ; then
    echo "your enviroment is still running, please tear it down with 'bucc down --clean'"
    exit 1
  fi
  rm -rf ${state}
  mv ${repo_root}/vars.yml ${repo_root}/vars.yml.bck
  echo "'state' dir has been cleaned and 'vars.yml' has been moved to 'vars.yml.bck'"
}

vars() {
    cat $(vars_file)
    echo "bosh_environment: $(ip)"
    echo "bosh_target: $(ip)"
    echo "bosh_ca_cert: |"
    echo "$(cat $(ca_cert) | sed 's/^/  /')"
    echo "bosh_client: admin"
    echo "bosh_client_secret: '$(int --path /instance_groups/0/jobs/name=uaa/properties/uaa/scim/users/name=admin/password)'"
    echo "credhub_url: $(int --path /instance_groups/0/properties/director/config_server/url | rev | cut -c6- | rev)"
    echo "credhub_username: credhub-cli"
    echo "credhub_password: $(int --path /instance_groups/0/jobs/name=uaa/properties/uaa/scim/users/name=credhub-cli/password)"
    echo "concourse_url: $(int --path /instance_groups/0/jobs/name=atc/properties/external_url)"
    echo "concourse_username: $(int --path /instance_groups/0/jobs/name=atc/properties/basic_auth_username)"
    echo "concourse_password: $(int --path /instance_groups/0/jobs/name=atc/properties/basic_auth_password)"
    echo "concourse_ca_cert: |"
    echo "$(cat $(ca_cert) | sed 's/^/  /')"
}

var_cache=${state}/vars_cache.yml
rm -f ${var_cache}

get_var() {
    if [[ ! -f ${var_cache} ]]; then
        vars > ${var_cache}
    fi
    ${boshexec} int ${var_cache} --path /$1
}

env() {
    if [[ ! -f ${vars_store} ]]; then
        exit 0
    fi
    echo "export BOSH_ENVIRONMENT=$(get_var bosh_target)"
    echo "export BOSH_CA_CERT='$(cat $(ca_cert))'"
    echo "export BOSH_CLIENT=$(get_var bosh_client)"
    echo "export BOSH_CLIENT_SECRET=$(get_var bosh_client_secret)"
    echo "export BOSH_GW_USER=$(int --path /instance_groups/name=bosh/jobs/name=user_add/properties/users/0/name)"
    echo "export BOSH_GW_HOST=$(ip)"
    echo "export BOSH_GW_PRIVATE_KEY=$(ssh_private_key)"
}

routes() {
    case $(platform) in
        darwin)
            sudo route add -net 10.244.0.0/16    192.168.50.6
            ;;
        linux)
            sudo route add -net 10.244.0.0/16 gw 192.168.50.6
            ;;
    esac
}


info() {
    echo "Concourse:"
    echo "  url: $(get_var concourse_url)"
    echo "  username: $(get_var concourse_username)"
    echo "  password: $(get_var concourse_password)"
}

_fly() {
    local url=$(get_var concourse_url)

    if [ ! -f ${repo_root}/bin/fly ]; then
        echo "installing fly cli into: ${repo_root}/bin/"
        pushd $(mktemp -d)
        curl -s -k -L >fly "${url}/api/v1/cli?arch=amd64&platform=$(platform)"
        chmod +x fly
        mv fly ${repo_root}/bin/
        popd
    fi

    faketty fly --target bucc login \
            --concourse-url ${url} \
            --username $(get_var concourse_username) \
            --password $(get_var concourse_password) \
            --team-name main \
            --ca-cert $(ca_cert)
}

_bosh() {
    ${boshexec} alias-env bucc \
                --environment $(get_var bosh_target) \
                --ca-cert "$(cat $(ca_cert))"

    printf '%s\n%s\n' $(get_var bosh_client) $(get_var bosh_client_secret) | \
        ${boshexec} log-in -e bucc

}

_credhub() {
    # TODO: remove if fetching credhub works via ci
    local url="https://github.com/cloudfoundry-incubator/credhub-cli/releases/download"
    local version=$(grep credhub ${repo_root}/.versions | sed 's/[^0-9.]*\([0-9.]*\).*/\1/')

    if [ ! -f ${repo_root}/bin/credhub ]; then
        echo "installing credhub cli into: ${repo_root}/bin/"
        pushd $(mktemp -d)
        curl -s -L >credhub.tgz "${url}/${version}/credhub-$(platform)-${version}.tgz"
        tar -xzf credhub.tgz
        chmod +x credhub
        mv credhub ${repo_root}/bin/
        popd
    fi

    credhub login --server $(get_var credhub_url) \
            --ca-cert $(ca_cert) \
            --username credhub-cli \
            --password $(get_var credhub_password)
}

_uaac() {
    faketty uaac target $(int --path /instance_groups/0/jobs/name=uaa/properties/uaa/url) --ca-cert $(ca_cert)
    faketty uaac token client get uaa_admin --secret $(int --path /instance_groups/0/jobs/name=uaa/properties/uaa/clients/uaa_admin/secret)
}

store_int() {
    ${boshexec} int $vars_store $@
}

int() {
    ${boshexec} int $(int_args) $@
}

ip() {
    int --path /networks/name=default/subnets/0/static/0
}

ssh_private_key() {
    local ssh_private_key="${state}/ssh.key"
    store_int --path /jumpbox_ssh/private_key > $ssh_private_key
    chmod 600 $ssh_private_key
    echo $ssh_private_key
}

_ssh() {
    local user=$(int --path /instance_groups/name=bosh/jobs/name=user_add/properties/users/0/name)
    cmd="ssh -i $(ssh_private_key) $user@$(ip)"
    if [ -z $@ ]; then
	${cmd} -t 'command; sudo su -'
    else
	${cmd} $@
    fi
}

header() {
    printf "\n\033[0;34m${1}\033[0m\n\n"
}

smoke_tests() {
    local bucc=${repo_root}/bin/bucc
    set -e

    header "testing bosh uaa auth"
    ${bucc} bosh
    ${boshexec} -e bucc vms

    header "testing credhub"
    ${bucc} credhub
    credhub set --no-overwrite --name secret/ping --value pong --type value
    credhub delete --name secret/ping

    header "testing concourse"
    ${bucc} fly

    if ! fly -t bucc workers | grep running; then
	>&2 echo "no concourse workers"; exit 1
    fi
}

case "$1" in
    up)
        shift
        rm -f ${state}/flags
        while [[ $# -gt 0 ]]; do
            case "$1" in
                -h|--help|help)
                    up_usage
                    exit 0
                    ;;
                --cpi)
                    echo "$2" > ${state}/cpi
                    shift
                    ;;
                --lite)
                    echo "true" > ${state}/lite
                    ;;
                *)
                    echo ${1#*--} >> ${state}/flags
            esac
            shift
        done
        validate_cpi
        validate_vars_file
        validate_cpi_flags

        up "$@"
        ;;

    down)
        shift
        while [[ $# -gt 0 ]]; do
            case "$1" in
                -h|--help|help)
                    down_usage
                    exit 0
                    ;;
                -c|--clean|clean)
                    down
                    clean
                    exit 0
                    ;;
            esac
            shift
        done
        down
        ;;

    clean)
        clean "$@"
        ;;

    env)
        env "$@"
        ;;

    info)
        info "$@"
        ;;

    vars)
        vars "$@"
        ;;

    bosh)
        _bosh "$@"
        ;;

    credhub)
        _credhub "$@"
        ;;

    uaac)
        _uaac "$@"
        ;;

    fly)
        _fly "$@"
        ;;

    ssh)
	shift
        _ssh "$@"
        ;;

    int)
        shift
        int "$@"
        ;;

    routes)
        routes
        ;;

    test)
        smoke_tests
        ;;

    *)
        usage
        exit 1
        ;;
esac
