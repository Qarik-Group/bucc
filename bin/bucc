#!/bin/bash
repo_root=$(dirname $(cd "$( dirname "${BASH_SOURCE[0]}" )" && pwd))

if [ -e "bbl-state.json" ]; then
    BBL_STATE_DIR="$(pwd)"
fi

if [[ "${BBL_STATE_DIR:-X}" != "X" ]]; then
    BUCC_PROJECT_ROOT="${BBL_STATE_DIR}"
    BUCC_STATE_ROOT="${BBL_STATE_DIR}/vars"
    BUCC_VARS_FILE="${BUCC_STATE_ROOT}/director-vars-file.yml"
    BUCC_STATE_STORE="${BUCC_STATE_ROOT}/bosh-state.json"
    BUCC_VARS_STORE="${BUCC_STATE_ROOT}/director-vars-store.yml"
fi

project_root=${BUCC_PROJECT_ROOT:-${repo_root}}
state=${BUCC_STATE_ROOT:-${project_root}/state}
vars_file=${BUCC_VARS_FILE:-${project_root}/vars.yml}
state_json_path=${BUCC_STATE_STORE:-${state}/state.json}
vars_store=${BUCC_VARS_STORE:-${state}/creds.yml}

manifest="${repo_root}/src/bosh-deployment/bosh.yml"
state_arg="--state ${state_json_path}"
vars_store_arg="--vars-store ${vars_store}"

mkdir -p ${state}
tmp=$(mktemp -d)
trap "rm -fr ${tmp}" EXIT
var_cache="${tmp}/vars_cache.yml"
int_cache="${tmp}/int_cache.yml"

PATH=${repo_root}/bin:${PATH}

version=$(grep bucc ${repo_root}/.versions | cut -d= -f2)

pushd () {
    command pushd "$@" > /dev/null
}

popd () {
    command popd "$@" > /dev/null
}

cpi() {
    local cpi_file=${state}/cpi
    local lite_file=${state}/lite
    if [[ ! -f $cpi_file ]]; then
        echo "virtualbox" > ${cpi_file}
        echo "true" > ${lite_file}
    fi
    cat ${cpi_file}
}

lite() {
    local lite_file=${state}/lite
    if [[ ! -f $lite_file ]]; then
        echo "false" > ${lite_file}
    fi
    cat ${lite_file}
}

cpis() {
    find ${repo_root}/ops/cpis -mindepth 1 -maxdepth 1 ! -type l -exec basename -a {} +;
}

validate_vars_file() {
    # Todo: prettify
    local cpi_vars=${repo_root}/ops/cpis/$(cpi)/vars.tmpl
    if [ ! -e $vars_file ]; then
        cp $cpi_vars $vars_file
        if [ ! $(cpi) = "virtualbox" ] && [ ! $(cpi) = "docker-desktop" ] ; then
            echo "We just copied a template in $vars_file please adjust it to your needs"
            # we should break here or check file contents and see if we still have the right var file for the cpi
            exit 1
        fi
    fi
}

validate_cpi() {
    local cpis_dir=${repo_root}/ops/cpis
    if [ ! -d ${cpis_dir}/$(cpi) ]; then
        echo "'--cpi $(cpi)' not supported, please one of the following:"
        echo $(cpis | xargs)
        exit 1
    fi
}

remove_flag() (
    if [ -f ${state}/flags ]; then
        touch ${state}/flags.tmp
        cat ${state}/flags | grep -v "${1}" > ${state}/flags.tmp
        mv ${state}/flags{.tmp,}
    fi
)

validate_cpi_flags() {
    if [ -f ${state}/flags ]; then
        for option in $(cat ${state}/flags); do
            local flags_dirs="${repo_root}/ops/flags"
            if [ -d "${repo_root}/ops/cpis/$(cpi)/flags" ]; then
                flags_dirs+=" ${repo_root}/ops/cpis/$(cpi)/flags"
            fi
            local supported_flags=$(ls ${flags_dirs} | grep yml | cut -d "." -f 1 | sed 's/^/--/' | xargs)
            if [[ ! ${supported_flags} == *"${option}"* ]]; then
                remove_flag "${option}"
                echo "unsupported flag: --${option}"
                echo "flags for '--cpi $(cpi)' are: ${supported_flags}"
                exit 1
            fi
        done
    fi
}

normalize_flags() (
    if [ -f ${state}/flags ]; then
        cat ${state}/flags | sort | uniq > ${state}/flags.tmp && mv ${state}/flags{.tmp,}
    fi
)

int_args() (
    local ops_files=()

    vars_file_arg="--vars-file $vars_file"

    if [ $(lite) = true ]; then
        ops_files+=(${repo_root}/ops/lite/*.yml)
        local cpi_lite_ops_dir="${repo_root}/ops/cpis/$(cpi)/lite"
        if [ -d "${cpi_lite_ops_dir}" ]; then
            ops_files+=(${cpi_lite_ops_dir}/*.yml)
        fi
    fi

    ops_files+=(${repo_root}/ops/*.yml)
    ops_files+=(${repo_root}/ops/cpis/$(cpi)/*.yml)

    if [ -f ${state}/flags ]; then
        for flag in $(cat ${state}/flags); do
            if [ -e "${repo_root}/ops/flags/${flag}.yml" ]; then
                ops_files+=(${repo_root}/ops/flags/${flag}.yml)
            else
                ops_files+=(${repo_root}/ops/cpis/$(cpi)/flags/${flag}.yml)
            fi
        done
    fi

    if [[ -d ${project_root}/operators ]]; then
        ops_files+=(${project_root}/operators/*.yml)
    fi

    ops_file_args=$(printf '%s\n' "${ops_files[@]}" | sed 's@\(.*\)/\(.*\)$@\2 \1/\2@g' | sort | cut -d' ' -f2- | sed 's/^/-o /' | xargs)
    echo "${manifest} ${ops_file_args} ${vars_store_arg} ${vars_file_arg}"
)

ca_cert() {
    local tmp=$(mktemp -d) # temp fix for https://github.com/cloudfoundry/cf-uaac/issues/60
    local ca_cert_file="${tmp}/ca.pem"
    store_int --path /default_ca/ca > $ca_cert_file
    store_int --path /credhub_ca/ca >> $ca_cert_file
    echo $ca_cert_file
}

usage() {
    echo "BUCC (BOSH UAA Credhub Concourse) CLI v${version}"
    echo "  up -- creates the bucc VM with bosh create-env"
    echo "  down -- deletes VM with bosh delete-env - can be used with --clean"
    echo "  clean -- start with a clean environment - use this only after you've torn down your env"
    echo "  ssh -- ssh into the bucc VM"
    echo "  rotate-certs -- regenerate certificates used by bucc"
    echo "  env -- sourceable environment variables for cli clients"
    echo "  int -- wrapper for 'bosh int' for the bosh manifest"
    echo "  info -- displays info about bucc deployed endpoints"
    echo "  bosh -- configures bosh cli"
    echo "  credhub -- configures credhub cli"
    echo "  safe -- configures safe cli"
    echo "  uaa -- configures uaa cli"
    echo "  fly -- configures fly cli"
    echo "  bbr -- wrapper for bbr cli"
    echo "  routes -- add routes for virtualbox"
    echo "  test -- check if all systems are operational"
    exit 1
}

up_usage() {
    echo "  --cpi      Cloud provider: [$(cpis | xargs | sed 's/ /, /g')]"
    echo "  --lite     Created bosh will use the warden cpi with garden runc"
    echo "  --recreate Recreate VM in deployment, also when there are no changes"
    echo "  --debug    Show arguments passed to 'bosh create-env'"
    echo "$(ls ${repo_root}/ops/flags | cut -d "." -f 1 | sed 's/^/  --/')"
    echo ""
    echo "  Optional cpi specific flags:"

    local cpis_dir=${repo_root}/ops/cpis
    for cpi in $(cpis); do
        local flags_dir=${repo_root}/ops/cpis/${cpi}/flags
        if [ -d ${flags_dir} ]; then
            echo "    ${cpi}: $(ls ${flags_dir} | cut -d "." -f 1 | sed 's/^/--/' | xargs)"
        fi
    done

}

down_usage() {
    echo "  -c | --clean  cleans up your environment by removing state files"
}

platform() {
    if [ "$(uname)" == "Darwin" ]; then
        echo "darwin"
    elif [ "$(expr substr $(uname -s) 1 5)" == "Linux" ]; then
        echo "linux"
    fi
}

faketty() {
    case $(platform) in
        darwin)
            script -q /dev/null "$@"
            ;;
        linux)
            script -qfc "$(printf "%q " "$@")" /dev/null
            ;;
    esac
}

run_hook() {
    local hook=${repo_root}/ops/cpis/$(cpi)/${1}.sh
    if [ -f ${hook} ]; then
        echo "Running ${1} hook: ${hook}"
        ${hook} ${vars_file}
        echo ""
    fi
}

up() {
    local flags="--cpi $(cpi)"
    local skip_drain="--skip-drain"
    if [ $(lite) = true ]; then
        flags+=" --lite"
    fi
    if [ -f ${state}/flags ]; then
        flags+=" $(cat ${state}/flags | sed 's/^/--/' | xargs)"
    fi
    echo "Using flags: ${flags}"
    echo -e "Flag files: '${state}/{cpi,lite,flags}'\n"

    if [[ ${DEBUG} == true ]]; then
        echo -e "bosh create-env ${skip_drain} $(int_args | sed 's/yml/yml \\ \\n/g') ${state_arg}\n"
    fi

    run_hook "pre-up"

    bosh --tty create-env ${skip_drain} $(int_args) ${state_arg} "$@"
}

down() {
    local skip_drain="--skip-drain"
    if [ ! -e $vars_file ]; then
      echo "please create a environment first with 'bucc up'"
      exit 1
    fi

    bosh --tty delete-env ${skip_drain} $(int_args) ${state_arg} "$@"
    exit_code=$?
    if [[ $exit_code -ne 0 ]]; then
      exit $exit_code
    fi


    run_hook "post-down"

    echo "you can use the clean command if your are planning to use a new cpi or ip"
}

clean() {
  if curl -m 1 -k -s https://$(bosh int <(bucc vars) --path /bosh_target):25555/info | grep uaa &>/dev/null ; then
    echo "your environment is still running, please tear it down with 'bucc down --clean'"
    exit 1
  fi
  rm -rf ${state}
  mv ${vars_file} ${vars_file}.bck
  echo "'state' dir has been cleaned and 'vars.yml' has been moved to 'vars.yml.bck'"
  echo "to also cleanup your current shell run `source <(bucc env --clean)`"
}

clean_bosh_downloads() {
    shas=$(int --path /releases | grep sha1: | awk '{print $2}')
    shas="${shas}\n$(int --path /resource_pools/name=vms/stemcell/sha1)"
    match=$(echo "${shas}" | xargs | sed 's/ /\\|/g')
    pushd ~/.bosh/downloads
    ls | grep -v "${match}" | xargs rm
}

vars() {
    bosh int ${vars_file}
    echo "bosh_environment: $(ip)"
    echo "bosh_target: https://$(ip):25555"
    echo "bosh_ca_cert: |"
    echo "$(cat $(ca_cert) | sed 's/^/  /')"
    echo "bosh_client: admin"
    echo "bosh_client_secret: '$(int --path /instance_groups/0/jobs/name=uaa/properties/uaa/scim/users/name=admin/password)'"
    echo "credhub_url: $(int --path /instance_groups/0/properties/director/config_server/url | rev | cut -c6- | rev)"
    echo "credhub_username: credhub-admin"
    echo "credhub_password: $(int --path /instance_groups/0/jobs/name=uaa/properties/uaa/clients/credhub-admin/secret)"
    echo "vault_url: https://$(int --path /instance_groups/0/jobs/name=vault-credhub-proxy/properties/address  | sed 's/0.0.0.0/localhost/g')"
    echo "concourse_url: $(int --path /instance_groups/0/jobs/name=web/properties/external_url)"
    echo "concourse_username: $(int --path /instance_groups/0/jobs/name=web/properties/add_local_users/0 | cut -d: -f1)"
    echo "concourse_password: $(int --path /instance_groups/0/jobs/name=web/properties/add_local_users/0 | cut -d: -f2)"
    echo "concourse_ca_cert: |"
    echo "$(cat $(ca_cert) | sed 's/^/  /')"
}


get_var() {
    path=$1
    if [[ ! -s ${var_cache} ]]; then
        vars > ${var_cache}
    fi
    bosh int ${var_cache} --path "/$path"
}

get_var_with_default() {
    path=$1
    default_value=$2
    if [[ ! -f ${var_cache} ]]; then
        vars > ${var_cache}
    fi
    if [[ -n $(cat ${var_cache} | grep "$path:") ]]; then
        bosh int ${var_cache} --path "/$path"
    else
        echo "${default_value}"
    fi
}

_alias() {
    get_var_with_default "alias" "bucc"
}

clean_env() {
    env | grep -e 'BOSH\|CREDHUB' | cut -d'=' -f1 | sed 's/^/unset /'
}

env() {
    echo "export PATH=\"${PATH}\""
    if [[ ! -f ${vars_store} ]]; then
        exit 0
    fi
    echo "export BOSH_ENVIRONMENT=$(get_var bosh_target)"
    echo "export BOSH_CA_CERT='$(cat $(ca_cert))'"
    echo "export BOSH_CLIENT=$(get_var bosh_client)"
    echo "export BOSH_CLIENT_SECRET=$(get_var bosh_client_secret)"
    echo "export BOSH_GW_USER=$(int --path /instance_groups/name=bosh/jobs/name=user_add/properties/users/0/name)"
    echo "export BOSH_GW_HOST=$(ip)"
    echo "export BOSH_GW_PRIVATE_KEY=$(ssh_private_key jumpbox_ssh)"
    echo "export CREDHUB_SERVER=$(get_var credhub_url)"
    echo "export CREDHUB_CLIENT=$(get_var credhub_username)"
    echo "export CREDHUB_SECRET=$(get_var credhub_password)"
    echo "export CREDHUB_CA_CERT=$(ca_cert)"
    if [[ $BOSH_ALL_PROXY != "" ]]; then
      echo "export SAFE_PROXY=$BOSH_ALL_PROXY"
    fi
}

routes() {
    case $(platform) in
        darwin)
            sudo route add -net 10.244.0.0/16    192.168.50.6
            ;;
        linux)
            sudo route add -net 10.244.0.0/16 gw 192.168.50.6
            ;;
    esac
}


info() {
    if [[ "${1}" == "--internal-ip" ]]; then
        local url="https://$(get_var internal_ip)"
    else
        local url=$(get_var concourse_url)
    fi

    echo "Concourse:"
    echo "  url: ${url}"
    echo "  username: $(get_var concourse_username)"
    echo "  password: $(get_var concourse_password)"
}

_fly() {
    if [[ "${1}" == "--internal-ip" ]]; then
        local url="https://$(get_var internal_ip)"
    else
        local url=$(get_var concourse_url)
    fi

    local fly=${repo_root}/bin/fly
    local fly_version=$(int --path=/releases/name=concourse/version)

    if [[ ! -f ${fly} || ("$(${fly} --version)" != "${fly_version}") ]]; then
        echo "installing fly ${fly_version} into: ${repo_root}/bin/"
        pushd $(mktemp -d)
        curl -s -k -L >fly "${url}/api/v1/cli?arch=amd64&platform=$(platform)"
        chmod +x fly
        mv fly ${repo_root}/bin/
        popd
    fi

    faketty fly --target "$(_alias)" login \
            --concourse-url ${url} \
            --username $(get_var concourse_username) \
            --password $(get_var concourse_password) \
            --team-name main \
            --ca-cert $(ca_cert)

    echo "Example fly commands:"
    echo "  fly -t $(_alias) pipelines"
    echo "  fly -t $(_alias) builds"
}

_bosh() {
    export BOSH_ENVIRONMENT="$(get_var bosh_target)"
    export BOSH_CA_CERT="$(get_var bosh_ca_cert)"
    export BOSH_CLIENT="$(get_var bosh_client)"
    export BOSH_CLIENT_SECRET="$(get_var bosh_client_secret)"

    bosh alias-env "$(_alias)"

    unset BOSH_ENVIRONMENT
    unset BOSH_CA_CERT
    unset BOSH_CLIENT
    unset BOSH_CLIENT_SECRET

    printf '%s\n%s\n' $(get_var bosh_client) $(get_var bosh_client_secret) | \
        bosh log-in -e "$(_alias)"
}

_credhub() {
    local url="https://github.com/cloudfoundry-incubator/credhub-cli/releases/download"
    local version=$(grep credhub ${repo_root}/.versions | cut -d= -f2)
    local cli_path=${repo_root}/bin/credhub

    if ! ( [ -f ${cli_path} ] && CREDHUB_SERVER='' ${cli_path} --version | head -n 1 | grep ${version} > /dev/null); then
      echo "installing credhub cli '${version}' into: ${repo_root}/bin/"
      pushd $(mktemp -d)
      curl -s -L >credhub.tgz "${url}/${version}/credhub-$(platform)-${version}.tgz"
      tar -xzf credhub.tgz
      chmod +x credhub
      mv credhub ${repo_root}/bin/
      popd
    fi

    ${cli_path} login --server $(get_var credhub_url) \
            --ca-cert $(ca_cert) \
            --client-name $(get_var credhub_username) \
            --client-secret $(get_var credhub_password)
}

_safe() {
    local url="https://github.com/starkandwayne/safe/releases/download"
    local version=$(grep safe ${repo_root}/.versions | cut -d= -f2)
    local cli_path=${repo_root}/bin/safe

    if ! ( [ -f ${cli_path} ] && ${cli_path} --version 2>&1 | head -n 1 | grep ${version} > /dev/null); then
      echo "installing safe cli '${version}' into: ${repo_root}/bin/"
      pushd $(mktemp -d)
      curl -s -L >safe "${url}/v${version}/safe-$(platform)-amd64"
      chmod +x safe
      mv safe ${repo_root}/bin/
      popd
    fi

    ${cli_path} target -k $(get_var vault_url) $(_alias)
    echo $(get_var credhub_username):$(get_var credhub_password) | ${cli_path} auth token
}


_bbr() {
    local url="https://github.com/cloudfoundry-incubator/bosh-backup-and-restore/releases/download"
    local version=$(grep bbr ${repo_root}/.versions | cut -d= -f2)
    local cli_path=${repo_root}/bin/bbr

    if ! ( [ -f ${cli_path} ] && ${cli_path} --version | head -n 1 | grep ${version} > /dev/null); then
      echo "installing bbr cli '${version}' into: ${repo_root}/bin/"
      pushd $(mktemp -d)
      curl -s -L >bbr.tar "${url}/v${version}/bbr-${version}.tar"
      tar -xf bbr.tar
      if [ "$(platform)" == "darwin" ]; then
          mv releases/bbr-mac ${repo_root}/bin/bbr
      else
          mv releases/bbr ${repo_root}/bin/
      fi
      popd
    fi

    local user=$(int --path /instance_groups/name=bosh/jobs/name=user_add/properties/users/0/name)
    ${cli_path} director --host $(ip) --username ${user} --private-key-path $(ssh_private_key jumpbox_ssh) "$@"
}

_ensure_bosh_cli_installed() {
    local url="https://s3.amazonaws.com/bosh-cli-artifacts/bosh-cli"
    local version=$(grep bosh ${repo_root}/.versions | cut -d= -f2)
    local cli_path=${repo_root}/bin/bosh

    if ! ( [ -f ${cli_path} ] && ${cli_path} --version | head -n 1 | grep ${version} > /dev/null); then

      (>&2 echo "installing bosh cli '${version}' into: ${repo_root}/bin/")
      pushd $(mktemp -d)
      if [ "$(platform)" == "darwin" ]; then
          curl -s -L >bosh "${url}-${version}-darwin-amd64"
          if [[ $? != 0 ]]; then
            echo "Unable to download the bosh CLI. Please check your internet connection and try again."
            exit 1
          fi
          chmod +x bosh
          mv bosh ${repo_root}/bin/
      else
          curl -s -L >bosh "${url}-${version}-linux-amd64"
          if [[ $? != 0 ]]; then
            echo "Unable to download the bosh CLI. Please check your internet connection and try again."
            exit 1
          fi
          chmod +x bosh
          mv bosh ${repo_root}/bin/
      fi
      popd
    fi
}

_uaac() {
    faketty uaac target $(int --path /instance_groups/0/jobs/name=uaa/properties/uaa/url) --ca-cert $(ca_cert)
    faketty uaac token client get uaa_admin --secret $(int --path /instance_groups/0/jobs/name=uaa/properties/uaa/clients/uaa_admin/secret)
}

_uaa() {
    local url="https://github.com/starkandwayne/uaa-cli-releases/releases/download"
    local version=$(grep uaa ${repo_root}/.versions | cut -d= -f2)
    local cli_path=${repo_root}/bin/uaa

    if ! ( [ -f ${cli_path} ] && ${cli_path} version | head -n 1 | grep ${version} > /dev/null); then
      echo "installing uaa cli '${version}' into: ${repo_root}/bin/"
      pushd $(mktemp -d)
      curl -s -L >uaa "${url}/v${version}/uaa-$(platform)-amd64"
      chmod +x uaa
      mv uaa ${repo_root}/bin/
      popd
    fi

    faketty uaa target $(int --path /instance_groups/0/jobs/name=uaa/properties/uaa/url) --skip-ssl-validation
    faketty uaa get-client-credentials-token uaa_admin --client_secret $(int --path /instance_groups/0/jobs/name=uaa/properties/uaa/clients/uaa_admin/secret)
}

store_int() {
    bosh int $vars_store "$@"
}

int() {
    if [[ ! -s ${int_cache} ]]; then
        bosh int $(int_args) > ${int_cache}
    fi
    bosh int ${int_cache} "$@"
}

ip() {
    int --path /networks/name=default/subnets/0/static/0
}

ssh_private_key() {
    local tmp=$(mktemp -d) # can be removed after fix https://github.com/cloudfoundry/bosh-cli/issues/418
    local ssh_private_key="${tmp}/${1}.key"
    store_int --path /${1}/private_key > $ssh_private_key
    chmod 400 $ssh_private_key
    echo $ssh_private_key
}

jump() {
    echo $BOSH_ALL_PROXY | sed -e 's$ssh+socks5://\(.*\):.*=\(.*\)$-o "ProxyCommand=ssh \1 -i \2 nc %h %p"$g'
}

_scp() {
    tmp_config=$(mktemp)
    if [[ "$BOSH_ALL_PROXY" == "ssh+socks5"* ]]; then
        echo $BOSH_ALL_PROXY | sed -e 's$ssh+socks5://\(.*\):\(.*\)?.*=\(.*\)$ProxyCommand ssh -W %h:%p \1 -p \2 -i \3$g' > ${tmp_config}
    fi
    local user=$(int --path /instance_groups/name=bosh/jobs/name=user_add/properties/users/0/name)
    cmd="scp -i $(ssh_private_key jumpbox_ssh) -F ${tmp_config} $1 $user@$(ip):$2"

    ${cmd}
    rm ${tmp_config}
}
_ssh() {
    tmp_config=$(mktemp)
    if [[ "$BOSH_ALL_PROXY" == "ssh+socks5"* ]]; then
        echo $BOSH_ALL_PROXY | sed -e 's$ssh+socks5://\(.*\):\(.*\)?.*=\(.*\)$ProxyCommand ssh -W %h:%p \1 -p \2 -i \3$g' > ${tmp_config}
    fi
    local user=$(int --path /instance_groups/name=bosh/jobs/name=user_add/properties/users/0/name)
    cmd="ssh -i $(ssh_private_key jumpbox_ssh) -F ${tmp_config} $user@$(ip)"

    if [ $# -eq 0 ]; then
        ${cmd} -t 'command; sudo su -'
    else
        ${cmd} "$@"
    fi
    rm ${tmp_config}
}

_rotate_certs() {
    local ops=""
    for cert in $(grep "ca: |" -B1 "${vars_store}" | grep -v "ca: |" | grep ':' | cut -d: -f1); do
        ops="${ops}"'- {"type":"remove","path":"/'"${cert}"'"}\n'
    done
    bosh int "${vars_store}" -o <(echo -e $ops) > "${vars_store}.tmp"
    mv "${vars_store}.tmp" "${vars_store}"
    echo "Certificates have been successfully removed from ${vars_store}"
    echo "Please run bucc up to generate and deploy new certificates"
}

header() {
    printf "\n\033[0;34m${1}\033[0m\n\n"
}

smoke_tests() {
    local bucc=${repo_root}/bin/bucc
    set -e

    header "testing bosh uaa auth"
    ${bucc} bosh
    bosh -e "$(_alias)" vms

    header "testing credhub"
    ${bucc} credhub
    credhub set --name secret/ping --value pong --type value
    credhub delete --name secret/ping

    header "testing concourse"
    ${bucc} fly
    fly -t "$(_alias)" sync

    if ! fly -t "$(_alias)" workers | grep running; then
        >&2 echo "no concourse workers"; exit 1
    fi

    header "testing uaa"
    ${bucc} uaa
    uaa get-user admin -a userName

    header "testing safe"
    ${bucc} safe
    safe gen secret/account passphrase
    safe get secret/account
    safe delete secret/account
}

_ensure_bosh_cli_installed
case "$1" in
    up)
        shift
        bosh_args=""
        while [[ $# -gt 0 ]]; do
            case "$1" in
                -h|--help|help)
                    up_usage
                    exit 0
                    ;;
                --cpi)
                    echo "$2" > ${state}/cpi
                    shift
                    ;;
                --cpi=*)
                    echo "${1#*=}" > ${state}/cpi
                    ;;
                --lite)
                    echo "true" > ${state}/lite
                    ;;
                --debug)
                    DEBUG=true
                    ;;
                --var=*|--var-file=*|--recreate)
                    bosh_args="${bosh_args} ${1}"
                    ;;
                *)
                    echo ${1#*--} >> ${state}/flags
            esac
            shift
        done
        normalize_flags
        validate_cpi
        validate_vars_file
        validate_cpi_flags

        up ${bosh_args}
        ;;

    down)
        shift
        bosh_args=""
        while [[ $# -gt 0 ]]; do
            case "$1" in
                -h|--help|help)
                    down_usage
                    exit 0
                    ;;
                -c|--clean|clean)
                    down
                    clean
                    exit 0
                    ;;
                --var=*|--var-file=*)
                    bosh_args="${bosh_args} ${1}"
                    ;;
            esac
            shift
        done
        down ${bosh_args}
        ;;

    clean)
        clean "$@"
        ;;

    clean_downloads)
        clean_bosh_downloads "$@"
        ;;

    bosh)
        _bosh "$@"
        ;;

    env)
        shift
        while [[ $# -gt 0 ]]; do
            case "$1" in
                -c|--clean|clean)
                    clean_env
                    exit 0
                    ;;
            esac
        done
        env "$@"
        ;;

    info)
        shift
        info "$@"
        ;;

    vars)
        vars "$@"
        ;;
    credhub)
        _credhub "$@"
        ;;

    safe)
        _safe "$@"
        ;;

    uaac)
        _uaac "$@"
        ;;

    uaa)
        _uaa "$@"
        ;;

    fly)
        shift
        _fly "$@"
        ;;

    bbr)
        shift
        _bbr "$@"
        ;;

    ssh)
        shift
        _ssh "$@"
        ;;
    scp)
        shift
        _scp "$@"
        ;;

    rotate-certs)
        shift
        _rotate_certs "$@"
        ;;

    int)
        shift
        int "$@"
        ;;

    routes)
        routes
        ;;

    test)
        smoke_tests
        ;;

    *)
        usage
        exit 1
        ;;
esac
